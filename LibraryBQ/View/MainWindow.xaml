<Window x:Class="LibraryBQ.View.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:LibraryBQ"
        xmlns:views="clr-namespace:LibraryBQ.View"
        xmlns:viewmodels="clr-namespace:LibraryBQ.ViewModel"
        xmlns:services="clr-namespace:LibraryBQ.Service"
        xmlns:customcontrols="clr-namespace:LibraryBQ.CustomControls"
        mc:Ignorable="d"
        WindowStartupLocation="CenterScreen" WindowStyle="None" ResizeMode="CanMinimize" Icon="/Image/Logo_Simple.png"
        Name="LibraryBQMain" Height="550" Width="750">

    <Window.Resources>
        <!-- ContentControl + DataTemplate 구조
            MVVM 패턴에서 ContentControl과 DataTemplate을 활용하는 핵심 구조
            - DataTemplate은 ViewModel 타입별로 알맞은 View(UserControl)를 자동으로 매핑하여 ContentControl의 Content에 표시
            - 이를 통해 CurrentViewModel이 변경되면 자동으로 적절한 화면 전환 실행
        -->
        <!-- 
            - 일반적으로 WPF에서 UserControl이나 Window 등 개별 뷰들은 DI 컨테이너를 통해 직접 생성되지 않음
            - XAML 구문은 View의 '기본 생성자' 호출, 생성자 오버로딩을 통한 생성자 주입 매핑 어려움
            - 생성자 주입 대신 ContentControl + DataTemplate 바인딩으로 간접 매핑
        -->
        <DataTemplate x:Name="HomeTemplate" DataType="{x:Type viewmodels:HomeViewModel}">
            <views:HomeView/>
        </DataTemplate>
        <DataTemplate x:Name="BookQueryTemplate" DataType="{x:Type viewmodels:BookQueryViewModel}">
            <views:BookQueryView/>
        </DataTemplate>
        <DataTemplate x:Name="LoginTemplate" DataType="{x:Type viewmodels:LoginViewModel}">
            <views:LoginView/>
        </DataTemplate>
        <DataTemplate x:Name="HistoryTemplate" DataType="{x:Type viewmodels:HistoryViewModel}">
            <views:HistoryView/>
        </DataTemplate>

        <!-- Bool 프로퍼티를 Visibility에 바인딩하기 위한 변환기 -->
        <!-- 코드 맨 아래쪽에 선언하니 Converter를 인식하지 못하던 문제가 리소스를 코드 위에서 선언하니 해결. StaticResource는 맨 위에서 선언 권장 -->
        <services:BooleanToVisibilityConverter x:Key="BoolVisibilityConverter"/>
        <services:ReverseBooleanToVisibilityConverter x:Key="ReverseBoolVisibilityConverter"/>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <!-- 커스텀 타이틀 영역 -->
            <RowDefinition Height="*"/>
            <!-- 상단 메뉴바 영역 -->
            <RowDefinition Height="*"/>
            <!-- 메뉴바 구분선 -->
            <RowDefinition Height="Auto"/>
            <!-- 중단 메뉴바 영역 -->
            <RowDefinition Height="2*"/>
            <!-- 하단 콘텐츠 영역 -->
            <RowDefinition Height="380"/>
        </Grid.RowDefinitions>

        <!-- 커스텀 타이틀 영역
            기본 윈도우 크기조절 및 테두리 제거 
            직접 배경, 로고, 앱 이름, 최소화/닫기 버튼 구현
            - MouseLeftButtonDown 핸들러로 드래그 이동 지원
            - 버튼 클릭으로 최소화 및 종료 동작 처리
        -->
        <Grid Grid.Row="0" Background="#FF8EAFF7" MouseLeftButtonDown="Grid_MouseLeftButtonDown">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="3*"/>
                <ColumnDefinition Width="7*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <!-- 로고 이미지 -->
            <Image Grid.Column="0" Source="/Image/Logo_Simple.png" Margin="5"/>
            <!-- 앱 이름 텍스트 -->
            <TextBlock Grid.Column="1" Text="작은도서관" FontFamily="Malgun Gothic" FontSize="15" VerticalAlignment="Center"/>
            <!-- 최소화 버튼 -->
            <Button x:Name="Minimizebtn" Grid.Column="3" Content="—" FontWeight="Bold" Background="Transparent" BorderBrush="Transparent" Click="Minimizebtn_Click"/>
            <!-- 닫기 버튼 -->
            <Button x:Name="Closebtn" Grid.Column="4" Content="⨉" FontWeight="Bold" Background="Transparent" BorderBrush="Transparent" Click="Closebtn_Click"/>
        </Grid>

        <!-- 상단 메뉴바 영역
            로그인 사용자명 출력 및 로그인/로그아웃 버튼 표시
            - LoginUserAccountStore에 바인딩하여 로그인 상태에 따라 버튼 및 텍스트 Visibility 조절
        -->
        <Grid Grid.Row="1" Background="#FFD2DCE6">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>
            <!-- 로그인한 사용자 이름 + '님'(로그인 시만 표시) 표시 -->
            <TextBlock x:Name="LoginUserName" Grid.Column="0" Text="{Binding LoginUserAccountStore.Name}" FontSize="12" FontWeight="SemiBold" VerticalAlignment="Center" HorizontalAlignment="Right"/>
            <TextBlock Grid.Column="1" Text="님" FontSize="12" VerticalAlignment="Center" Visibility="{Binding LoginUserAccountStore.IsLogin, Converter={StaticResource BoolVisibilityConverter}}"/>
            <!-- 로그인 버튼, 로그인 안했을 때만 표시 -->
            <Button x:Name="Loginbtn" HorizontalAlignment="Right" Grid.Column="2" Width="70" Content="로그인" FontSize="12" FontWeight="SemiBold" Background="Transparent" BorderBrush="Transparent"
                    Command="{Binding LoginbtnClickCommand}" Visibility="{Binding LoginUserAccountStore.IsLogin, Converter={StaticResource ReverseBoolVisibilityConverter}}"/>
            <!-- 로그아웃 버튼, 로그인 시만 표시 -->
            <Button x:Name="Logoutbtn" HorizontalAlignment="Right" Grid.Column="2" Width="70" Content="로그아웃" FontSize="12" FontWeight="SemiBold" Background="Transparent" BorderBrush="Transparent"
                    Command="{Binding LoginbtnClickCommand}" Visibility="{Binding LoginUserAccountStore.IsLogin, Converter={StaticResource BoolVisibilityConverter}}"/>
        </Grid>

        <!-- 메뉴바 구분선 -->
        <Line Grid.Row="2" X1="0" X2="750" Y1="0" Y2="0" StrokeThickness="3" Stroke="LightGray"/>

        <!-- 중단 메뉴바 영역
            홈, 자료검색, 이용이력 등의 메뉴 버튼 배치 및 스타일링
            - 각 버튼은 Command에 바인딩 되어 있어 클릭 시 ViewModel의 커맨드 실행
            - 이미지와 텍스트 배치에 Grid를 활용하여 가독성과 디자인 완성도 향상
            - 이미지에 사각형 오버레이를 사용해 색상 입히는 구현(추후 스타일화 가능)
        -->
        <Grid Grid.Row="3" Background="#FFD2DCE6">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="3*"/>
                <ColumnDefinition Width="6*"/>
            </Grid.ColumnDefinitions>

            <!-- 홈 버튼 -->
            <Button x:Name="Homebtn" Grid.Column="0" Background="Transparent" BorderBrush="Transparent" Command="{Binding HomebtnClickCommand}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="2*"/>
                    </Grid.ColumnDefinitions>
                    <Image Grid.Column="0" Source="/Image/Logo.png" Margin="0, 10 ,10, 10"/>
                    <Grid Grid.Column="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="3*"/>
                            <RowDefinition Height="2*"/>
                        </Grid.RowDefinitions>
                        <TextBlock Grid.Row="0" FontFamily="HYPost" FontSize="25" FontWeight="SemiBold" VerticalAlignment="Bottom" Text="작은도서관" Foreground="DarkBlue"/>
                        <TextBlock Grid.Row="1" FontFamily="Malgun Gothic" FontSize="12" FontWeight="SemiBold" VerticalAlignment="Top" Text="MINI LIBRARY" Foreground="DarkBlue"/>
                    </Grid>
                </Grid>
            </Button>

            <!-- 자료검색, 이용이력 버튼 영역 -->
            <Grid Grid.Column="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <!-- 자료검색 버튼 -->
                <Button x:Name="BookQuerybtn" Grid.Column="1" Background="Transparent" BorderBrush="Transparent" Command="{Binding BookbtnClickCommand}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="3*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0" Text="자료검색 " FontSize="18" FontWeight="SemiBold" Foreground="DarkBlue" VerticalAlignment="Center"/>
                        
                        <!--<Image Grid.Column="1" Source="/Image/Search.png"/>
                        <Rectangle Grid.Column="1" Stroke="Transparent" Fill="DarkBlue">
                            <Rectangle.OpacityMask>
                                <ImageBrush ImageSource="/Image/Search.png"/>
                            </Rectangle.OpacityMask>
                        </Rectangle>-->
                        
                        <!-- UserControl로 구현한 이미지(아이콘) 마스킹 컨트롤 -->
                        <customcontrols:ImageMask Grid.Column="1" MaskingColor="DarkBlue" MaskImageSource="/Image/Search.png" />
                    </Grid>
                </Button>

                <!-- 이용이력 버튼 -->
                <Button x:Name="MyHistorybtn" Grid.Column="2" Background="Transparent" BorderBrush="Transparent" Command="{Binding MyHistorybtnClickCommand}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="3*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0" Text="이용이력 " FontSize="18" FontWeight="SemiBold" Foreground="DarkBlue" VerticalAlignment="Center"/>
                        
                        <!-- UserControl로 구현한 이미지(아이콘) 마스킹 컨트롤 -->
                        <customcontrols:ImageMask Grid.Column="1" MaskingColor="DarkBlue" MaskImageSource="/Image/Login_History.png" />
                    </Grid>
                </Button>
            </Grid>
        </Grid>

        <!-- 하단 콘텐츠 영역
            현재 활성화된 ViewModel에 따라 알맞은 View를 표시.
            - ContentControl 대신 Frame 사용하며 NavigationUIVisibility를 Hidden하여 네비게이션 UI 제거
            - Content 속성에 CurrentViewModel을 바인딩하여 DataTemplate에 따라 알맞은 UserControl 자동 표시
        -->
        <Grid x:Name="MainSection" Grid.Row="4" Panel.ZIndex="1">
            <Frame x:Name="MainFrame" NavigationUIVisibility="Hidden" Height="auto" Content="{Binding CurrentViewModel}"/>
        </Grid>
    </Grid>
</Window>
